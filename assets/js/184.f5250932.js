(window.webpackJsonp=window.webpackJsonp||[]).push([[184],{566:function(t,a,o){"use strict";o.r(a);var e=o(42),r=Object(e.a)({},(function(){var t=this,a=t.$createElement,o=t._self._c||a;return o("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[o("h1",{attrs:{id:"安装"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#安装"}},[t._v("#")]),t._v(" 安装")]),t._v(" "),o("p",[t._v("wget https://github.com/cjlin1/libsvm/archive/refs/tags/v325.tar.gz\nmake -j")]),t._v(" "),o("h1",{attrs:{id:"数据格式"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#数据格式"}},[t._v("#")]),t._v(" 数据格式")]),t._v(" "),o("p",[t._v("i: label 类型 int\nindex feature 从1开始 realnumber\nvalue 值\nlabel index:value index:value ...\n...")]),t._v(" "),o("p",[t._v("tools/checkdata.py 可以检查数据格式")]),t._v(" "),o("h1",{attrs:{id:"训练"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#训练"}},[t._v("#")]),t._v(" 训练")]),t._v(" "),o("p",[t._v("i: heart_scale 训练数据\no: heart_scale.model 训练模型\nsvm-train heart_scale")]),t._v(" "),o("h1",{attrs:{id:"预测"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#预测"}},[t._v("#")]),t._v(" 预测")]),t._v(" "),o("p",[t._v("i: heart_scale.t 测试数据\nheart_scale.model 训练模型\no: output\n输出测试数据的类别\nsvm-predict heart_scale.t heart_scale.model output")]),t._v(" "),o("h1",{attrs:{id:"my-svm-train"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#my-svm-train"}},[t._v("#")]),t._v(" my-svm-train")]),t._v(" "),o("p",[t._v("toutiao_data >> 训练.svm-train toutiao_data\nmy-svm-train.c\n解析参数\n=> input_file_name 数据文件, model_file_name 模型文件")]),t._v(" "),o("h2",{attrs:{id:"倒排查询-idf"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#倒排查询-idf"}},[t._v("#")]),t._v(" 倒排查询 idf")]),t._v(" "),o("p",[t._v("(toutiao * [word_index], word_index)\ncount(select(word_index))")]),t._v(" "),o("p",[t._v("read_json(json_file)=>Json::Value\nparse_json(Json::Value)=>toutiao_vec: vector[Toutiao, ...]")]),t._v(" "),o("p",[t._v("平衡数据 balance_data(non_balanced_toutiao_vec, toutiao_vec: vector[Toutiao, ...])=>vector[Toutiao, ...]\nformat_data(vector[Toutiao...])=>vector[FormattedToutiao...]\ni: toutiao_vec vector[Toutiao, ...]\no: format_toutiao_vec\n去除停顿词\nvector[FormattedToutiao, ...]\nformatted_toutiao\nword_index 从1开始\nsplit_sentence(title)=>[word, ...]=word_list\n@word_to_index(word)->word_index\n=>[word_index, ...]\n构造一张set word_exist_set{word_index}\nfor word_index: {word_index}\nword_file_count_map[word_Index]++")]),t._v(" "),o("p",[t._v("cal_idf(vector[FormattedToutiao...])\nidf_a=get_word_file_count")]),t._v(" "),o("h2",{attrs:{id:"平衡数据"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#平衡数据"}},[t._v("#")]),t._v(" 平衡数据")]),t._v(" "),o("p",[t._v("read_json(json_file)=>Json::Value\nparse_json(Json::Value)=>toutiao_vec: vector[Toutiao, ...]\nnone_count=0, other_count=0\nfor toutiao in toutiao_vec:\n_tag==None\nnone_count++\n_other\nother_count++\n计算(None/其他分类)=比值\n平衡数据 balance_data(non_balanced_toutiao_vec, toutiao_vec: vector[Toutiao, ...])=>vector[Toutiao, ...]\n将其他分类*比值\nfor toutiao in non_balanced_toutiao_vec\n_tag==None\ntoutiao_vec.push_back\n_other\ntoutiao_vec.push_back * 比值\nformat_data(vector[Toutiao...])=>vector[FormattedToutiao...]\ncal_idf(vector[FormattedToutiao...])")]),t._v(" "),o("h2",{attrs:{id:"data"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#data"}},[t._v("#")]),t._v(" _data")]),t._v(" "),o("h3",{attrs:{id:"每个word在多少个文件中出现-word-file-count-map-int-int"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#每个word在多少个文件中出现-word-file-count-map-int-int"}},[t._v("#")]),t._v(" 每个word在多少个文件中出现 word_file_count_map<int, int>")]),t._v(" "),o("h4",{attrs:{id:"word-add-file-为word-index添加一个文件计数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#word-add-file-为word-index添加一个文件计数"}},[t._v("#")]),t._v(" word_add_file 为word_index添加一个文件计数")]),t._v(" "),o("h3",{attrs:{id:"tag转换为label-tag-label-map"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tag转换为label-tag-label-map"}},[t._v("#")]),t._v(" tag转换为label tag_label_map")]),t._v(" "),o("h3",{attrs:{id:"word转换为index-word-index-map"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#word转换为index-word-index-map"}},[t._v("#")]),t._v(" word转换为index word_index_map")]),t._v(" "),o("h3",{attrs:{id:"wordkv"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#wordkv"}},[t._v("#")]),t._v(" $ WordKV")]),t._v(" "),o("p",[t._v("{word_index, word_value}")]),t._v(" "),o("h3",{attrs:{id:"formattedtoutiao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#formattedtoutiao"}},[t._v("#")]),t._v(" $ FormattedToutiao")]),t._v(" "),o("p",[t._v("{label, vector[WordKV]}\ntoutiao_total_word_count:int toutiao全部单词总数\nword_index_word_info_map\nindex:int->count:int")]),t._v(" "),o("h4",{attrs:{id:"calculate-word-count-in-toutiao-word-list-map-word-wordtfidfinfo-计算word在toutiao中出现次数"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#calculate-word-count-in-toutiao-word-list-map-word-wordtfidfinfo-计算word在toutiao中出现次数"}},[t._v("#")]),t._v(" calculate_word_count_in_toutiao(word_list)->map(word, WordTfIdfInfo) 计算word在toutiao中出现次数")]),t._v(" "),o("p",[t._v("o: toutiao_word_count_map\ntoutiao_total_word_count toutiao中全部单词数")]),t._v(" "),o("h3",{attrs:{id:"toutiao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#toutiao"}},[t._v("#")]),t._v(" $ Toutiao")]),t._v(" "),o("p",[t._v("{title, tag}")]),t._v(" "),o("h3",{attrs:{id:"wordtfidfinfo"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#wordtfidfinfo"}},[t._v("#")]),t._v(" $ WordTfIdfInfo")]),t._v(" "),o("p",[t._v("{count:int, tf:double, idf:double}")]),t._v(" "),o("h2",{attrs:{id:"util"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#util"}},[t._v("#")]),t._v(" _util")]),t._v(" "),o("h3",{attrs:{id:"tag-to-label-tag-int"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#tag-to-label-tag-int"}},[t._v("#")]),t._v(" tag_to_label(tag)-> int")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("tag是否存在 tag_map.exist()\n    _存在=> 返回值\n    _不存在=>\n        创建tag 返回值\n")])])]),o("h3",{attrs:{id:"word-to-index-word-word-index-将word转换为数字索引"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#word-to-index-word-word-index-将word转换为数字索引"}},[t._v("#")]),t._v(" word_to_index(word)->word_index 将word转换为数字索引")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("word是否存在 word_map.exist()\n    _存在=> 返回值\n    _不存在=>\n        创建word 返回值\n")])])]),o("h2",{attrs:{id:"read-json-file-json-file-json-value-json类型的数据"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#read-json-file-json-file-json-value-json类型的数据"}},[t._v("#")]),t._v(" read_json_file(json_file)=>json_value json类型的数据")]),t._v(" "),o("p",[t._v("i: json_file toutiao/multiclass/multiclass.json 数据文件\no: json_value c++内的json对象数组")]),t._v(" "),o("h2",{attrs:{id:"parse-json-json-value-json-list-vector-toutiao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#parse-json-json-value-json-list-vector-toutiao"}},[t._v("#")]),t._v(" parse_json(json_value)=>json_list:vector[Toutiao, ...]")]),t._v(" "),o("p",[t._v("i: json_value json类型的数据\no: json_list vector[Toutiao, ...]\nTODO 平衡数据")]),t._v(" "),o("h2",{attrs:{id:"format-data-toutiao-vec-vector-toutiao-format-toutiao-vec-vector-formattedtoutiao"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#format-data-toutiao-vec-vector-toutiao-format-toutiao-vec-vector-formattedtoutiao"}},[t._v("#")]),t._v(" format_data(toutiao_vec:vector[Toutiao, ...]) => format_toutiao_vec:vector[FormattedToutiao, ...]")]),t._v(" "),o("p",[t._v("i: toutiao_vec vector[Toutiao, ...]\no: format_toutiao_vec\nTODO 去除停顿词\nvector[FormattedToutiao, ...]\nformatted_toutiao\nlabel为分类 int\ntag_to_label(Toutiao.tag)->label\nword_index 从1开始\nsplit_sentence(title)=>[word, ...]=word_list\n@word_to_index(word)->word_index\n=>[word_index, ...]\nformatted_toutiao.calculate_word_count_in_toutiao()\n=>word_index_word_info_map\nindex:int->word_tf_idf_info:WordTfIdfInfo\n; 计算tf cal_tf\ntf 单词在文件中的出现频率= tf_a 单词在文件中出现的次数/ tf_b文件中出现的单词总数\ntf_a= get_word_count_in_toutiao(word, toutiao_word_count_map)-> int\ntf_b= formatted_toutiao.get_total_word_count_in_toutiao()-> int\n=>format_toutiao.tf_vec")]),t._v(" "),o("h2",{attrs:{id:"cal-idf-formatted-toutiao-vec-vector-formattedtoutiao-formatted-toutiao-vec-tf-idf-vec"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#cal-idf-formatted-toutiao-vec-vector-formattedtoutiao-formatted-toutiao-vec-tf-idf-vec"}},[t._v("#")]),t._v(" cal_idf(formatted_toutiao_vec:vector[FormattedToutiao, ...])->formatted_toutiao_vec.tf_idf_vec")]),t._v(" "),o("div",{staticClass:"language- extra-class"},[o("pre",[o("code",[t._v("for formatted_toutiao in formatted_toutiao_vec\n    idf= log(文件总数/(idf_a 出现该词的文件数+1))\n        idf_a= count_file_contain_word(format_toutiao_vec, word)\n            for formatted_toutiao: formatted_toutiao_vec\n                fn(word, formatted_toutiao.word_)-> 是否出现此单词\n    word_value= tf*idf\n")])])]),o("h2",{attrs:{id:"output-data-将数据按格式输出"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#output-data-将数据按格式输出"}},[t._v("#")]),t._v(" output_data() 将数据按格式输出")]),t._v(" "),o("h2",{attrs:{id:"print-tag-map-将tag-map打印出来-方便predict后比对"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#print-tag-map-将tag-map打印出来-方便predict后比对"}},[t._v("#")]),t._v(" print_tag_map() 将tag map打印出来 方便predict后比对")]),t._v(" "),o("p",[t._v("read_problem(input_file_name=@data_file)")]),t._v(" "),o("p",[t._v("svm_train(train_data=data_file)\n=> multiclass.model\ni: train_data 训练数据\ni: label 类型 int\nindex feature 从1开始 realnumber\nvalue 值\nlabel index:value index:value ...\n...\no: multiclass.model 训练模型")]),t._v(" "),o("p",[t._v("svm_predict(test_data, multiclass.model)\n=> predict_result\ni: test_data 预测数据\no: predict_result 预测结果")]),t._v(" "),o("h1",{attrs:{id:"my-svm-predict"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#my-svm-predict"}},[t._v("#")]),t._v(" my-svm-predict")]),t._v(" "),o("p",[t._v("i:/Jarvis_200802/190320-Web/210107-Toutiao/multiclass/svm_predict.json\no:toutiao_data.predict")]),t._v(" "),o("blockquote",[o("blockquote",[o("p",[t._v("预测.svm-predict toutiao_data.predict toutiao_data.model toutiao_data.predict")])])])])}),[],!1,null,null,null);a.default=r.exports}}]);