(window.webpackJsonp=window.webpackJsonp||[]).push([[154],{538:function(t,a,_){"use strict";_.r(a);var v=_(42),r=Object(v.a)({},(function(){var t=this,a=t.$createElement,_=t._self._c||a;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("p",[_("strong",[t._v("A Hybrid Approach for an Interpretable and Explainable")])]),t._v(" "),_("p",[_("strong",[t._v("Intrusion Detection System")])]),t._v(" "),_("h1",{attrs:{id:"abstract"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#abstract"}},[t._v("#")]),t._v(" Abstract")]),t._v(" "),_("p",[t._v("​\t网络安全问题已经被关注了相当长的一段时间。在最近几年\n最近几年，网络攻击的规模和复杂性一直在增加，技术上的显著进步助长了这种情况。如今，有一个不可避免的需要就是保护对业务连续性至关重要的系统和数据。因此，许多入侵检测系统已经被创建，以试图减轻这些威胁，并为更及时的检测做出贡献。这项工作提出了一个"),_("strong",[t._v("可解释和可说明的混合入侵检测系统")]),t._v("，它利用人工智能方法来实现更好和更持久的安全。该系统"),_("strong",[t._v("结合了专家的书面规则和由决策树算法不断产生的动态知识")]),t._v(", 决策树算法生成的动态知识，因为新的证据碎片从网络活动中出现。网络活动中出现的新证据而不断生成的动态知识。")]),t._v(" "),_("h1",{attrs:{id:"introduction"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#introduction"}},[t._v("#")]),t._v(" Introduction")]),t._v(" "),_("p",[t._v('​\t随着技术的最新发展，人们和企业的很多敏感信息都通过互联网在各种设备上共享。计算技术缺乏安全性，给攻击者留下了许多机会来利用可能包含敏感数据的系统，而这些数据对企业的业务连续性至关重要。根据2019年5月的一项研究，"网络和物理安全。来自C-Suite的观点"，首席执行官和公司董事会正在投入更多的精力来提高网络安全[1]。为了提高网络的安全性，有多种协议/框架可供遵循，也有多种工具可供使用。一个企业可以遵循特定的安全框架，这将提出有关安全的各种用例。根据不同的用例，网络安全管理员应该能够了解哪种工具最适合。')]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("入侵检测系统")]),t._v("（IDS）是重要的安全机制，它"),_("strong",[t._v("分析流经网络和系统的流量，识别和提醒可疑的活动，采用异常检测方法")]),t._v("[2]。根据S.KishorWagh等人在[3]中所说，有三种类型的异常检测。这些都是基于统计、知识或机器学习。")]),t._v(" "),_("p",[t._v("​\t\t第一种是"),_("strong",[t._v("分析网络工作通常的行为方式")]),t._v("，任何对该状态的扰动都可以被认为是异常的。")]),t._v(" "),_("p",[t._v("​\t\t基于知识的方法是最常用的方法[3]，它采用"),_("strong",[t._v("知识工程师提供的领域信息")]),t._v("，在专家的协助下，以领域规则的形式填充一个知识库，推理引擎可以利用这个知识库来检测异常情况。知识库是为解决领域问题而计算的事实、假设和规则的存储。")]),t._v(" "),_("p",[t._v("​\t\t最新的方法是"),_("strong",[t._v("基于机器学习的异常检测")]),t._v("，使用机器学习（ML）模型来检测异常。这些通常是有监督或无监督的。")]),t._v(" "),_("p",[t._v("关于第一种，它通常要经过一个训练阶段，在这个阶段，它需要数据来定义ML模型的行为，这是模型性能的一个重要步骤。相比之下，无监督的模型不需要训练。相反，它们可能会借助其他方法，如聚类或奖励代理，以达到学习的目的。")]),t._v(" "),_("p",[t._v("​\t现在，大多数IDS，如Snort[4]、Suricata[5]和Zeek[6]，都是基于规则的，但缺乏适应性，因此最近的研究是使用基于机器学习/x02的方法来检测异常。不幸的是，虽然后者可能有很好的效果，但它们让用户对检测过程一无所知，因为他们不知道为什么或如何识别攻击，因为它们大多依赖于黑箱模型。")]),t._v(" "),_("p",[t._v("​\t这项工作旨在通过提出基于ML的IDS特征来增强网络资产的网络安全。该建议采用了基于规则的ap\\x02方法，这意味着它的稳健性和弹性与知识库的完整性一样。然而，它很难用有价值的规则来维护和扩展它，因此，在这种情况下引入了ML/x02tion。此外，它还提高了从经验证据中获得新知识的能力，这可能有助于扩大知识库，因此有助于管理系统知识库的安全运营中心（SOC）工程师。")]),t._v(" "),_("p",[t._v("​\t第2节提供了关于现有IDS的文献回顾，对可解释性和可解释性概念的概述以及max02chine学习在IDS中的应用。第3节分析了这项工作的贡献，以及对拟议系统的结构和功能的理解。第4节介绍了一个案例研究和取得的成果。最后，第5节总结了这项工作的主要结论，并描述了未来要探索的新研究方向。")]),t._v(" "),_("h1",{attrs:{id:"_2-related-work"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-related-work"}},[t._v("#")]),t._v(" 2 Related Work")]),t._v(" "),_("p",[t._v("​\t多年来，许多IDS已经被开发出来，以提高网络的安全性。也有人尝试将这些现有的IDS与ML模型合并。本章提供了关于现有IDS的文献回顾，并回顾了人工智能在网络安全领域的应用。 IDS是网络安全机制，它允许用户通过发出警报来了解可能的网络/工作入侵。IDS可以有多种类型，最常见的是基于主机的IDS（HIDS）和基于网络的IDS（NIDS）。关于后者，有一些开源的IDS，如Snort、Suricata和Zeek。")]),t._v(" "),_("p",[t._v("​\t这些IDS都有一定的能力，但它们通常都朝着同一个目标努力，即入侵检测。它们都使用基于知识的方法来检测异常情况，采用基于异常情况和基于签名的方法来进行入侵检测。特别是，Zeek超越了检测，因为它包括性能测量和故障排除。另外，它的架构定义了一个元建模的概念，允许有知识的人通过对特定业务场景的建模来扩展它。")]),t._v(" "),_("p",[t._v("​\t总的来说，Zeek最终是最通用的，因为它可以检测更广泛的活动模式，但它更难配置。另一方面，Snort和Suricata更加直观和彻底。应该部署哪种或哪种IDS的问题总是取决于组织的内部网络的大小和规模[2]。同时使用各种IDS的好处是，不同的IDS在默认情况下，可能拥有不同的检测异常情况的能力。这可以帮助安全管理员确定错过的漏洞和攻击者可能进行的利用[2]。")]),t._v(" "),_("p",[t._v("​\t考虑到美国国家标准与技术研究所（NIST）[7]网络安全框架[8]，上面提到的IDS满足识别和检测的支柱。然而，它们可以被扩展，因此符合保护、响应和恢复的准则。")]),t._v(" "),_("p",[t._v("​\t根据最近的文献[9]，人工智能算法 stud/x02ied的检测能力，如随机森林（RF）、多层感知器（MLP）、长短期记忆（LSTM）、决策树（DT）、k-最近的邻居（kNN）和支持向量机（SVM），效果相当好。例如，Oliveira等人[9]用RFs、MLPs和LSTMs进行了一项实验，通过比较CIDDS-001数据集中的单流和多流检测方法，了解哪种方法的性能最好。他们的结论是，从多流的角度来看，CIDDS-001的基于异常的入侵检测得到了更好的解决，将LSTM模型列为最有希望的模型。")]),t._v(" "),_("p",[t._v("​\t然而，上面提到的人工智能算法通常是黑箱的，这可能是实现可解释性的禁忌[10]。可解释性是在一个系统中实现的具有挑战性的资产。当它使用ML时，它明显更复杂，因为它们中的大多数使用黑箱技术。这些对于用户有效地理解、信任和正确地与系统互动是至关重要的，如果这些系统是基于人工智能的，那就更加重要。以人为本的IDS需要人类与代理的互动。在这种情况下，可解释性的原因是说服指定的人类参与者与之互动[11].")]),t._v(" "),_("p",[t._v("​\t如果一个基于知识的IDS通过包含知识发现方法而成为以人为中心和以代理为中心的系统的统一版本，同样适用[11]。为了使一个ML模型被完全理解，人类应该能够进行每一次计算以产生预测[11][12]。因此，人们已经进行了研究，以测试可解释的模型来检测异常情况。")]),t._v(" "),_("p",[t._v("​\tMahbooba等人[10]决定采取DT方法来确保可解释性，因为它提供了一种基于人类的决策方法，结论是该算法能够对特征的重要性进行排序，提供可解释的规则，实现与最先进算法类似的准确性。")]),t._v(" "),_("p",[t._v("​\t一些作者决定研究上述NIDS与上述一些ML模型的整合。S.Shah等人在他们的文章[13]中决定采用Snort和Suricata，并通过测试它们与ML的集成来加强它们。他们在没有ML支持的情况下对IDS进行了几次测试，以了解它们的原始缺陷。他们继续测试了五种不同的算法，以找到最合适的算法，并能够得出结论，使用萤火虫算法的SVM优化版本取得了最好的结果。")]),t._v(" "),_("p",[t._v("​\tV. Gustavsson在他的论文中[14]，使用Zeek提取特征并将它们发送到ML模型中进行分类。他用已经存在的没有ML的检测脚本测试了这个工具。然后继续测试IDS的速度，有和没有流量特征提取脚本。最后，作者测试了每个ML模型，以了解哪个选项是与Zeek整合的最佳选择。")]),t._v(" "),_("p",[t._v("​\tC. Sinclair等人[15]实现了一个模块，其中包含与Gex02netic Algorithm（GA）和DT的接口。作者用DT来生成规则，用GA来改进简单的规则，其中初始群体由任意规则组成。Ad\\x02ditionally，A. A. Ojugo等人[16]决定通过GA创建规则来优化IDSs。他们得出结论，由GA创建的规则取决于fit/x02ness函数权重值的选择。此外，从所有创建的规则中，他们估计80%的规则适合检测，根据这个结果，他们得出结论，拥有一组好的规则比拥有一个最佳规则更好。")]),t._v(" "),_("h1",{attrs:{id:"_3-hybrid-intrusion-detection-system"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-hybrid-intrusion-detection-system"}},[t._v("#")]),t._v(" 3 Hybrid Intrusion Detection System")]),t._v(" "),_("p",[t._v("本章包括这项工作的贡献，所提出的解决方案的架构设计，借助统一建模语言（UML）[17]、4+1架构视图[18]和C4[19]模型形式，描述系统的操作和诊断与规则生成的管道描述。")]),t._v(" "),_("h2",{attrs:{id:"_3-1-contributions"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-contributions"}},[t._v("#")]),t._v(" 3.1 Contributions")]),t._v(" "),_("p",[t._v("​\t这项工作对提供IDS的研究做出了贡献，它在填充知识库方面的ML支持很突出，这对人类来说是一个智力和时间上都很昂贵的操作。不仅如此，它还具有可解释性和可说明性，因为它证明了建议的规则和对每个资产进行的诊断，以及它在数据到来时采取行动的能力。此外，由于ML利用经验知识工作，它可以根据它所部署的领域进行微调。因此，它可以提出一个专家永远不会想到的规则。结合这两种方法的目标是能够让SOC工程师用自定义或ML建议的规则来填充知识库，同时保留一个可解释和可说明的环境。")]),t._v(" "),_("p",[t._v("![image-20211125113447989](211123_A Hybrid Approach for an Interpretable and Explainable.assets/image-20211125113447989.png)")]),t._v(" "),_("p",[t._v("​\t该系统采用了基于微服务的架构，如图1所示，因为它具有许多优点，使系统具有高度的可扩展性，提供故障隔离、自动部署、可维护性、可重用性、可用性，并允许应用程序分散[20]。此外，根据GRASP[21]和SOLID[22]原则，该系统的架构符合高内聚性、低耦合性和单一责任原则，因为这些服务只承担有限和集中的责任，使得它们小而精，并且可以替换。")]),t._v(" "),_("p",[t._v("​\t 这个解决方案可以被分解成六个不同的容器，用户界面（UI）；主数据网络（MDN）；Drools后台；异常检测器和解释器（ADE）；规则生成器（RG）；以及授权和认证（Auth）。")]),t._v(" "),_("p",[t._v("​\tUI负责显示内容和处理用户输入，与系统的后台沟通以触发功能。MDN容器负责所有网络资产的创建、读取、更新和删除（CRUD）操作。Drools后台负责所有对规则的CRUD操作，诊断资产时要借助Drools引擎[23]并进行论证。这个容器引入了事件驱动范式[24]，因为它使用Apache Kafka[25]来实时处理数据。这个服务是一个Kafka主题的订阅者，这意味着它接收存储在Kafka服务器中的相应数据，这些数据是由发布者节点发布的。在这种情况下，服务器作为一个事件总线工作，因为它存储事件直到它们被消费。这使得系统可以在数据到达时采取行动。ADE容器负责分析生成的证据以预测攻击的发生，根据编码到规则库的知识提供详细的解释。RG负责通过使用ADE提供的解释来生成新的规则。最后，Auth容器负责处理用户数据、认证和授权。用户可以通过访问UI容器与后台所有的RESTful应用编程接口（API）[26]进行交互。")]),t._v(" "),_("p",[t._v("​\tUI和Auth容器是用typecript开发的，第一个使用React框架。MDN、Drools后端和规则生成器是用Java开发的，ADE容器是用Python开发的。实现的ML模型是scikit-learn的DT[27]。根据[10]和[12]的研究，这是一个自然透明的模型，因此，提供了一个合理的可解释水平。该系统有两个独立的数据库，一个用于存储用户相关信息，一个用于存储与IDS相关的数据，如规则、资产和理由。这种分离是为了提高敏感数据的安全性。")]),t._v(" "),_("h2",{attrs:{id:"_3-3-system-operations"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-system-operations"}},[t._v("#")]),t._v(" 3.3 System Operations")]),t._v(" "),_("p",[t._v("本节介绍了本系统的整个运行情况，包括用户和IDS之间的互动以及其内部运行。\n用户和IDS之间的互动以及它的内部运作。")]),t._v(" "),_("p",[t._v("![image-20211125113758005](211123_A Hybrid Approach for an Interpretable and Explainable.assets/image-20211125113758005.png)")]),t._v(" "),_("p",[t._v("​\t如图2所示，一个经过认证和授权的用户可以进行多种操作，如建立网络拓扑结构，以规则的形式将知识写入知识库，与这些知识进行交互，并查阅资产诊断历史，分别显示在绿色和橙色管道中。此外，该系统可以通过用于诊断资产的Kafka主题接收网络流量数据，图中描述为红色管道。每个诊断都会导致一个理由，并可能导致新的建议规则，表示为虚线管道/x02线。然后，建议的规则可能被接受。然而，这需要用户互动，因为SOC工程师决定上述规则的质量和对系统知识库的必要性。")]),t._v(" "),_("h2",{attrs:{id:"_3-4-pipeline-description"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-pipeline-description"}},[t._v("#")]),t._v(" 3.4 Pipeline Description")]),t._v(" "),_("p",[t._v("本节介绍了诊断资产和生成规则的步骤，如图2所示，分别为红色和虚线管道。")]),t._v(" "),_("p",[t._v("诊断管道--Kafka生产者开始向Kafka服务器发送数据包，然后由Kafka消费者进行消费。数据被处理，触发了动态证据的计算。每个动态证据都代表了关于所收到的数据包序列的信息。然后这些信息被发送到"),_("strong",[t._v("Drools规则引擎")]),t._v("。通过使用这个推理引擎，有可能得出假设和结论。当得出结论或所有的规则都被测试后，引擎的验证就结束了。当验证步骤结束后，就会得到匹配的规则树。有了这些，就有可能产生一个理由并相应地改变资产的状态。该结果解释如下。")]),t._v(" "),_("ul",[_("li",[t._v("如果得出了结论，那么它就处于危险状态；")]),t._v(" "),_("li",[t._v("如果没有得出结论，但至少提出了一个假设，那么它就处于警告状态\n如果没有得出结论，但至少提出了一个假设，则处于警告状态；")]),t._v(" "),_("li",[t._v("如果没有达到任何预测，则资产处于正常状态")])]),t._v(" "),_("p",[t._v("规则生成管道--在诊断过程中，动态证据被发送到ADE容器，从而触发规则生成管道。到达ADE容器后，数据被处理，然后被发送到DT模型，进行预测/x02tion。如果预测是负面的，那么就不创建规则。否则，利用DT的可解释性，对树进行回溯，以了解哪些条件会导致它被认为是一个异常现象。通过对树的这种追踪，多个条件被匹配。这些条件被发送到生成新规则的RG容器中。如果新规则不存在于规则数据库中，它就会被持久化，并建议给SOC工程师。目前的实施方案生成的规则数量与攻击类叶子节点的数量一样多，每条规则都由攻击分支中的前置条件组成。")])])}),[],!1,null,null,null);a.default=r.exports}}]);